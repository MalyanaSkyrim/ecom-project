generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  firstName     String
  lastName      String?
  avatar        String?
  emailVerified DateTime?
  accounts      Account[]
  authenticator Authenticator[]
  carts         Cart[]
  sessions      Session[]
  storeUsers    StoreUser[]
}

model Account {
  userId            String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  customerId        String?
  customer          Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique
  userId       String?
  customerId   String?
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([customerId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String    @id @unique
  userId               String?
  customerId           String?
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  customer             Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user                 User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id         String      @id @default(uuid())
  name       String
  slug       String      @unique
  domain     String?     @unique
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  apiKeys    ApiKey[]
  carts      Cart[]
  categories Category[]
  customers  Customer[]
  orders     Order[]
  products   Product[]
  reviews    Review[]
  storeUsers StoreUser[]
}

model StoreUser {
  id        String    @id @default(uuid())
  userId    String
  storeId   String
  role      StoreRole @default(STAFF)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
}

model ApiKey {
  id        String   @id @default(uuid())
  storeId   String
  name      String
  keyPrefix String
  hashedKey String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, name])
  @@index([keyPrefix])
}

model Cart {
  id        String     @id @default(uuid())
  storeId   String
  userId    String?
  sessionId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@unique([storeId, userId])
  @@unique([storeId, sessionId])
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  name        String
  slug        String
  description String?
  price       Decimal
  isActive    Boolean     @default(true)
  isFeatured  Boolean     @default(false)
  rating      Float?      @default(0.0)
  totalSales  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@unique([storeId, slug])
  @@index([storeId, isFeatured])
  @@index([storeId, totalSales])
  @@index([storeId, rating])
  @@index([storeId, categoryId])
}

model Customer {
  id                     String          @id @default(uuid())
  storeId                String
  email                  String
  firstName              String?
  lastName               String?
  name                   String?
  password               String?
  emailVerified          DateTime?
  avatar                 String?
  totalSpent             Decimal         @default(0)
  orderCount             Int             @default(0)
  lastOrderDate          DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isNewsletterSubscribed Boolean         @default(false)
  accounts               Account[]
  authenticator          Authenticator[]
  store                  Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders                 Order[]
  reviews                Review[]
  sessions               Session[]

  @@unique([storeId, email])
  @@index([storeId, totalSpent])
  @@index([storeId, isNewsletterSubscribed])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  customerId  String
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  total       Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customer    Customer    @relation(fields: [customerId], references: [id])
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@unique([storeId, orderNumber])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String?
  productName String
  quantity    Int
  unitPrice   Decimal
  totalPrice  Decimal
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id])
}

model Category {
  id            String     @id @default(uuid())
  storeId       String
  name          String
  slug          String
  description   String?
  imageUrl      String?
  parentId      String?
  /// [CategoryTags]
  tags          Json       @default("[]")
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryHierarchy")
  store         Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products      Product[]

  @@unique([storeId, slug])
  @@index([storeId, isActive])
  @@index([storeId, parentId])
}

model Review {
  id         String   @id @default(uuid())
  storeId    String
  customerId String
  productId  String?
  content    String
  rating     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId, productId])
  @@index([storeId, rating])
  @@index([customerId])
}

enum StoreRole {
  OWNER
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
